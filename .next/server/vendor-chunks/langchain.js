"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* binding */ BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n/**\n * Abstract class that provides a default implementation for the\n * loadAndSplit() method from the DocumentLoader interface. The load()\n * method is left abstract and needs to be implemented by subclasses.\n */ class BaseDocumentLoader {\n    /**\n     * Loads the documents and splits them using a specified text splitter.\n     * @param textSplitter The TextSplitter instance to use for splitting the loaded documents. Defaults to a RecursiveCharacterTextSplitter instance.\n     * @returns A Promise that resolves with an array of Document instances, each split according to the provided TextSplitter.\n     */ async loadAndSplit(splitter = new _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter()) {\n        const docs = await this.load();\n        return splitter.splitDocuments(docs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNFO0FBQ3RFOzs7O0NBSUMsR0FDTSxNQUFNQztJQUNUOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhQyxXQUFXLElBQUlILDZFQUE4QkEsRUFBRSxFQUFFO1FBQ2hFLE1BQU1JLE9BQU8sTUFBTSxJQUFJLENBQUNDLElBQUk7UUFDNUIsT0FBT0YsU0FBU0csY0FBYyxDQUFDRjtJQUNuQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3luY2NoYXQvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzPzI0YTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyLCB9IGZyb20gXCIuLi90ZXh0X3NwbGl0dGVyLmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgcHJvdmlkZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB0aGVcbiAqIGxvYWRBbmRTcGxpdCgpIG1ldGhvZCBmcm9tIHRoZSBEb2N1bWVudExvYWRlciBpbnRlcmZhY2UuIFRoZSBsb2FkKClcbiAqIG1ldGhvZCBpcyBsZWZ0IGFic3RyYWN0IGFuZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZG9jdW1lbnRzIGFuZCBzcGxpdHMgdGhlbSB1c2luZyBhIHNwZWNpZmllZCB0ZXh0IHNwbGl0dGVyLlxuICAgICAqIEBwYXJhbSB0ZXh0U3BsaXR0ZXIgVGhlIFRleHRTcGxpdHRlciBpbnN0YW5jZSB0byB1c2UgZm9yIHNwbGl0dGluZyB0aGUgbG9hZGVkIGRvY3VtZW50cy4gRGVmYXVsdHMgdG8gYSBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBEb2N1bWVudCBpbnN0YW5jZXMsIGVhY2ggc3BsaXQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCBUZXh0U3BsaXR0ZXIuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZEFuZFNwbGl0KHNwbGl0dGVyID0gbmV3IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlcigpKSB7XG4gICAgICAgIGNvbnN0IGRvY3MgPSBhd2FpdCB0aGlzLmxvYWQoKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVyLnNwbGl0RG9jdW1lbnRzKGRvY3MpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIiLCJCYXNlRG9jdW1lbnRMb2FkZXIiLCJsb2FkQW5kU3BsaXQiLCJzcGxpdHRlciIsImRvY3MiLCJsb2FkIiwic3BsaXREb2N1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/buffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferLoader: () => (/* binding */ BufferLoader)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n/**\n * Abstract class that extends the `BaseDocumentLoader` class. It\n * represents a document loader that loads documents from a buffer. The\n * `load()` method is implemented to read the buffer contents and metadata\n * based on the type of `filePathOrBlob`, and then calls the `parse()`\n * method to parse the buffer and return the documents.\n */ class BufferLoader extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentLoader {\n    constructor(filePathOrBlob){\n        super();\n        Object.defineProperty(this, \"filePathOrBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: filePathOrBlob\n        });\n    }\n    /**\n     * Method that reads the buffer contents and metadata based on the type of\n     * `filePathOrBlob`, and then calls the `parse()` method to parse the\n     * buffer and return the documents.\n     * @returns Promise that resolves with an array of `Document` objects.\n     */ async load() {\n        let buffer;\n        let metadata;\n        if (typeof this.filePathOrBlob === \"string\") {\n            const { readFile } = await BufferLoader.imports();\n            buffer = await readFile(this.filePathOrBlob);\n            metadata = {\n                source: this.filePathOrBlob\n            };\n        } else {\n            buffer = await this.filePathOrBlob.arrayBuffer().then((ab)=>Buffer.from(ab));\n            metadata = {\n                source: \"blob\",\n                blobType: this.filePathOrBlob.type\n            };\n        }\n        return this.parse(buffer, metadata);\n    }\n    /**\n     * Static method that imports the `readFile` function from the\n     * `fs/promises` module in Node.js. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns Promise that resolves with an object containing the `readFile` function.\n     */ static async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return {\n                readFile\n            };\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ0g7QUFDaEQ7Ozs7OztDQU1DLEdBQ00sTUFBTUUscUJBQXFCRCx3REFBa0JBO0lBQ2hERSxZQUFZQyxjQUFjLENBQUU7UUFDeEIsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBT047UUFDWDtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNTyxPQUFPO1FBQ1QsSUFBSUM7UUFDSixJQUFJQztRQUNKLElBQUksT0FBTyxJQUFJLENBQUNULGNBQWMsS0FBSyxVQUFVO1lBQ3pDLE1BQU0sRUFBRVUsUUFBUSxFQUFFLEdBQUcsTUFBTVosYUFBYWEsT0FBTztZQUMvQ0gsU0FBUyxNQUFNRSxTQUFTLElBQUksQ0FBQ1YsY0FBYztZQUMzQ1MsV0FBVztnQkFBRUcsUUFBUSxJQUFJLENBQUNaLGNBQWM7WUFBQztRQUM3QyxPQUNLO1lBQ0RRLFNBQVMsTUFBTSxJQUFJLENBQUNSLGNBQWMsQ0FDN0JhLFdBQVcsR0FDWEMsSUFBSSxDQUFDLENBQUNDLEtBQU9DLE9BQU9DLElBQUksQ0FBQ0Y7WUFDOUJOLFdBQVc7Z0JBQUVHLFFBQVE7Z0JBQVFNLFVBQVUsSUFBSSxDQUFDbEIsY0FBYyxDQUFDbUIsSUFBSTtZQUFDO1FBQ3BFO1FBQ0EsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ1osUUFBUUM7SUFDOUI7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsYUFBYUUsVUFBVTtRQUNuQixJQUFJO1lBQ0EsTUFBTSxFQUFFRCxRQUFRLEVBQUUsR0FBRyxNQUFNLHNJQUEwQjtZQUNyRCxPQUFPO2dCQUFFQTtZQUFTO1FBQ3RCLEVBQ0EsT0FBT1csR0FBRztZQUNOQyxRQUFRQyxLQUFLLENBQUNGO1lBQ2QsTUFBTSxJQUFJRyxNQUFNLENBQUMscUhBQXFILEVBQUU1QixpRUFBTUEsR0FBRywrQ0FBK0MsQ0FBQztRQUNyTTtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zeW5jY2hhdC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2ZzL2J1ZmZlci5qcz84YTQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVudiB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52XCI7XG5pbXBvcnQgeyBCYXNlRG9jdW1lbnRMb2FkZXIgfSBmcm9tIFwiLi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IGV4dGVuZHMgdGhlIGBCYXNlRG9jdW1lbnRMb2FkZXJgIGNsYXNzLiBJdFxuICogcmVwcmVzZW50cyBhIGRvY3VtZW50IGxvYWRlciB0aGF0IGxvYWRzIGRvY3VtZW50cyBmcm9tIGEgYnVmZmVyLiBUaGVcbiAqIGBsb2FkKClgIG1ldGhvZCBpcyBpbXBsZW1lbnRlZCB0byByZWFkIHRoZSBidWZmZXIgY29udGVudHMgYW5kIG1ldGFkYXRhXG4gKiBiYXNlZCBvbiB0aGUgdHlwZSBvZiBgZmlsZVBhdGhPckJsb2JgLCBhbmQgdGhlbiBjYWxscyB0aGUgYHBhcnNlKClgXG4gKiBtZXRob2QgdG8gcGFyc2UgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuIHRoZSBkb2N1bWVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJMb2FkZXIgZXh0ZW5kcyBCYXNlRG9jdW1lbnRMb2FkZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpbGVQYXRoT3JCbG9iKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZpbGVQYXRoT3JCbG9iXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmaWxlUGF0aE9yQmxvYlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgcmVhZHMgdGhlIGJ1ZmZlciBjb250ZW50cyBhbmQgbWV0YWRhdGEgYmFzZWQgb24gdGhlIHR5cGUgb2ZcbiAgICAgKiBgZmlsZVBhdGhPckJsb2JgLCBhbmQgdGhlbiBjYWxscyB0aGUgYHBhcnNlKClgIG1ldGhvZCB0byBwYXJzZSB0aGVcbiAgICAgKiBidWZmZXIgYW5kIHJldHVybiB0aGUgZG9jdW1lbnRzLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIGBEb2N1bWVudGAgb2JqZWN0cy5cbiAgICAgKi9cbiAgICBhc3luYyBsb2FkKCkge1xuICAgICAgICBsZXQgYnVmZmVyO1xuICAgICAgICBsZXQgbWV0YWRhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5maWxlUGF0aE9yQmxvYiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkRmlsZSB9ID0gYXdhaXQgQnVmZmVyTG9hZGVyLmltcG9ydHMoKTtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGF3YWl0IHJlYWRGaWxlKHRoaXMuZmlsZVBhdGhPckJsb2IpO1xuICAgICAgICAgICAgbWV0YWRhdGEgPSB7IHNvdXJjZTogdGhpcy5maWxlUGF0aE9yQmxvYiB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyID0gYXdhaXQgdGhpcy5maWxlUGF0aE9yQmxvYlxuICAgICAgICAgICAgICAgIC5hcnJheUJ1ZmZlcigpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGFiKSA9PiBCdWZmZXIuZnJvbShhYikpO1xuICAgICAgICAgICAgbWV0YWRhdGEgPSB7IHNvdXJjZTogXCJibG9iXCIsIGJsb2JUeXBlOiB0aGlzLmZpbGVQYXRoT3JCbG9iLnR5cGUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShidWZmZXIsIG1ldGFkYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0aGF0IGltcG9ydHMgdGhlIGByZWFkRmlsZWAgZnVuY3Rpb24gZnJvbSB0aGVcbiAgICAgKiBgZnMvcHJvbWlzZXNgIG1vZHVsZSBpbiBOb2RlLmpzLiBJdCBpcyB1c2VkIHRvIGR5bmFtaWNhbGx5IGltcG9ydCB0aGVcbiAgICAgKiBmdW5jdGlvbiB3aGVuIG5lZWRlZC4gSWYgdGhlIGltcG9ydCBmYWlscywgaXQgdGhyb3dzIGFuIGVycm9yXG4gICAgICogaW5kaWNhdGluZyB0aGF0IHRoZSBgZnMvcHJvbWlzZXNgIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZVxuICAgICAqIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGByZWFkRmlsZWAgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGltcG9ydHMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlYWRGaWxlIH0gPSBhd2FpdCBpbXBvcnQoXCJub2RlOmZzL3Byb21pc2VzXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgcmVhZEZpbGUgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgZnMvcHJvbWlzZXMuIFRleHRMb2FkZXIgYXZhaWxhYmxlIG9ubHkgb24gZW52aXJvbm1lbnQgJ25vZGUnLiBJdCBhcHBlYXJzIHlvdSBhcmUgcnVubmluZyBlbnZpcm9ubWVudCAnJHtnZXRFbnYoKX0nLiBTZWUgaHR0cHM6Ly88bGluayB0byBkb2NzPiBmb3IgYWx0ZXJuYXRpdmVzLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImdldEVudiIsIkJhc2VEb2N1bWVudExvYWRlciIsIkJ1ZmZlckxvYWRlciIsImNvbnN0cnVjdG9yIiwiZmlsZVBhdGhPckJsb2IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibG9hZCIsImJ1ZmZlciIsIm1ldGFkYXRhIiwicmVhZEZpbGUiLCJpbXBvcnRzIiwic291cmNlIiwiYXJyYXlCdWZmZXIiLCJ0aGVuIiwiYWIiLCJCdWZmZXIiLCJmcm9tIiwiYmxvYlR5cGUiLCJ0eXBlIiwicGFyc2UiLCJlIiwiY29uc29sZSIsImVycm9yIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/pdf.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* binding */ PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\");\n/* harmony import */ var _util_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/document.js */ \"(rsc)/./node_modules/langchain/dist/util/document.js\");\n\n\n\n/**\n * A class that extends the `BufferLoader` class. It represents a document\n * loader that loads documents from PDF files.\n * @example\n * ```typescript\n * const loader = new PDFLoader(\"path/to/bitcoin.pdf\");\n * const docs = await loader.load();\n * console.log({ docs });\n * ```\n */ class PDFLoader extends _buffer_js__WEBPACK_IMPORTED_MODULE_1__.BufferLoader {\n    constructor(filePathOrBlob, { splitPages = true, pdfjs = PDFLoaderImports, parsedItemSeparator = \"\" } = {}){\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"splitPages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pdfjs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parsedItemSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.splitPages = splitPages;\n        this.pdfjs = pdfjs;\n        this.parsedItemSeparator = parsedItemSeparator;\n    }\n    /**\n     * A method that takes a `raw` buffer and `metadata` as parameters and\n     * returns a promise that resolves to an array of `Document` instances. It\n     * uses the `getDocument` function from the PDF.js library to load the PDF\n     * from the buffer. It then iterates over each page of the PDF, retrieves\n     * the text content using the `getTextContent` method, and joins the text\n     * items to form the page content. It creates a new `Document` instance\n     * for each page with the extracted text content and metadata, and adds it\n     * to the `documents` array. If `splitPages` is `true`, it returns the\n     * array of `Document` instances. Otherwise, if there are no documents, it\n     * returns an empty array. Otherwise, it concatenates the page content of\n     * all documents and creates a single `Document` instance with the\n     * concatenated content.\n     * @param raw The buffer to be parsed.\n     * @param metadata The metadata of the document.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */ async parse(raw, metadata) {\n        const { getDocument, version } = await this.pdfjs();\n        const pdf = await getDocument({\n            data: new Uint8Array(raw.buffer),\n            useWorkerFetch: false,\n            isEvalSupported: false,\n            useSystemFonts: true\n        }).promise;\n        const meta = await pdf.getMetadata().catch(()=>null);\n        const documents = [];\n        for(let i = 1; i <= pdf.numPages; i += 1){\n            const page = await pdf.getPage(i);\n            const content = await page.getTextContent();\n            if (content.items.length === 0) {\n                continue;\n            }\n            // Eliminate excessive newlines\n            // Source: https://github.com/albertcui/pdf-parse/blob/7086fc1cc9058545cdf41dd0646d6ae5832c7107/lib/pdf-parse.js#L16\n            let lastY;\n            const textItems = [];\n            for (const item of content.items){\n                if (\"str\" in item) {\n                    if (lastY === item.transform[5] || !lastY) {\n                        textItems.push(item.str);\n                    } else {\n                        textItems.push(`\\n${item.str}`);\n                    }\n                    // eslint-disable-next-line prefer-destructuring\n                    lastY = item.transform[5];\n                }\n            }\n            const text = textItems.join(this.parsedItemSeparator);\n            documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: text,\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    },\n                    loc: {\n                        pageNumber: i\n                    }\n                }\n            }));\n        }\n        if (this.splitPages) {\n            return documents;\n        }\n        if (documents.length === 0) {\n            return [];\n        }\n        return [\n            new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: (0,_util_document_js__WEBPACK_IMPORTED_MODULE_2__.formatDocumentsAsString)(documents),\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    }\n                }\n            })\n        ];\n    }\n}\nasync function PDFLoaderImports() {\n    try {\n        const { default: mod } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdf-parse\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js */ \"(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js\", 19));\n        const { getDocument, version } = mod;\n        return {\n            getDocument,\n            version\n        };\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"Failed to load pdf-parse. Please install it with eg. `npm install pdf-parse`.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* binding */ CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* binding */ LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* binding */ MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* binding */ RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* binding */ SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/tiktoken */ \"(rsc)/./node_modules/@langchain/core/utils/tiktoken.js\");\n\n\nclass TextSplitter extends _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.BaseDocumentTransformer {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"document_transformers\",\n                \"text_splitters\"\n            ]\n        });\n        Object.defineProperty(this, \"chunkSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        Object.defineProperty(this, \"chunkOverlap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 200\n        });\n        Object.defineProperty(this, \"keepSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lengthFunction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chunkSize = fields?.chunkSize ?? this.chunkSize;\n        this.chunkOverlap = fields?.chunkOverlap ?? this.chunkOverlap;\n        this.keepSeparator = fields?.keepSeparator ?? this.keepSeparator;\n        this.lengthFunction = fields?.lengthFunction ?? ((text)=>text.length);\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    async transformDocuments(documents, chunkHeaderOptions = {}) {\n        return this.splitDocuments(documents, chunkHeaderOptions);\n    }\n    splitOnSeparator(text, separator) {\n        let splits;\n        if (separator) {\n            if (this.keepSeparator) {\n                const regexEscapedSeparator = separator.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n                splits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n            } else {\n                splits = text.split(separator);\n            }\n        } else {\n            splits = text.split(\"\");\n        }\n        return splits.filter((s)=>s !== \"\");\n    }\n    async createDocuments(texts, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadatas = [], chunkHeaderOptions = {}) {\n        // if no metadata is provided, we create an empty one for each text\n        const _metadatas = metadatas.length > 0 ? metadatas : new Array(texts.length).fill({});\n        const { chunkHeader = \"\", chunkOverlapHeader = \"(cont'd) \", appendChunkOverlapHeader = false } = chunkHeaderOptions;\n        const documents = new Array();\n        for(let i = 0; i < texts.length; i += 1){\n            const text = texts[i];\n            let lineCounterIndex = 1;\n            let prevChunk = null;\n            let indexPrevChunk = -1;\n            for (const chunk of (await this.splitText(text))){\n                let pageContent = chunkHeader;\n                // we need to count the \\n that are in the text before getting removed by the splitting\n                const indexChunk = text.indexOf(chunk, indexPrevChunk + 1);\n                if (prevChunk === null) {\n                    const newLinesBeforeFirstChunk = this.numberOfNewLines(text, 0, indexChunk);\n                    lineCounterIndex += newLinesBeforeFirstChunk;\n                } else {\n                    const indexEndPrevChunk = indexPrevChunk + await this.lengthFunction(prevChunk);\n                    if (indexEndPrevChunk < indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexEndPrevChunk, indexChunk);\n                        lineCounterIndex += numberOfIntermediateNewLines;\n                    } else if (indexEndPrevChunk > indexChunk) {\n                        const numberOfIntermediateNewLines = this.numberOfNewLines(text, indexChunk, indexEndPrevChunk);\n                        lineCounterIndex -= numberOfIntermediateNewLines;\n                    }\n                    if (appendChunkOverlapHeader) {\n                        pageContent += chunkOverlapHeader;\n                    }\n                }\n                const newLinesCount = this.numberOfNewLines(chunk);\n                const loc = _metadatas[i].loc && typeof _metadatas[i].loc === \"object\" ? {\n                    ..._metadatas[i].loc\n                } : {};\n                loc.lines = {\n                    from: lineCounterIndex,\n                    to: lineCounterIndex + newLinesCount\n                };\n                const metadataWithLinesNumber = {\n                    ..._metadatas[i],\n                    loc\n                };\n                pageContent += chunk;\n                documents.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent,\n                    metadata: metadataWithLinesNumber\n                }));\n                lineCounterIndex += newLinesCount;\n                prevChunk = chunk;\n                indexPrevChunk = indexChunk;\n            }\n        }\n        return documents;\n    }\n    numberOfNewLines(text, start, end) {\n        const textSection = text.slice(start, end);\n        return (textSection.match(/\\n/g) || []).length;\n    }\n    async splitDocuments(documents, chunkHeaderOptions = {}) {\n        const selectedDocuments = documents.filter((doc)=>doc.pageContent !== undefined);\n        const texts = selectedDocuments.map((doc)=>doc.pageContent);\n        const metadatas = selectedDocuments.map((doc)=>doc.metadata);\n        return this.createDocuments(texts, metadatas, chunkHeaderOptions);\n    }\n    joinDocs(docs, separator) {\n        const text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    }\n    async mergeSplits(splits, separator) {\n        const docs = [];\n        const currentDoc = [];\n        let total = 0;\n        for (const d of splits){\n            const _len = await this.lengthFunction(d);\n            if (total + _len + (currentDoc.length > 0 ? separator.length : 0) > this.chunkSize) {\n                if (total > this.chunkSize) {\n                    console.warn(`Created a chunk of size ${total}, +\nwhich is longer than the specified ${this.chunkSize}`);\n                }\n                if (currentDoc.length > 0) {\n                    const doc = this.joinDocs(currentDoc, separator);\n                    if (doc !== null) {\n                        docs.push(doc);\n                    }\n                    // Keep on popping if:\n                    // - we have a larger chunk than in the chunk overlap\n                    // - or if we still have any chunks and the length is long\n                    while(total > this.chunkOverlap || total + _len > this.chunkSize && total > 0){\n                        total -= await this.lengthFunction(currentDoc[0]);\n                        currentDoc.shift();\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += _len;\n        }\n        const doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n}\nclass CharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"CharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        this.separator = fields?.separator ?? this.separator;\n    }\n    async splitText(text) {\n        // First we naively split the large input into a bunch of smaller ones.\n        const splits = this.splitOnSeparator(text, this.separator);\n        return this.mergeSplits(splits, this.keepSeparator ? \"\" : this.separator);\n    }\n}\nconst SupportedTextSplitterLanguages = [\n    \"cpp\",\n    \"go\",\n    \"java\",\n    \"js\",\n    \"php\",\n    \"proto\",\n    \"python\",\n    \"rst\",\n    \"ruby\",\n    \"rust\",\n    \"scala\",\n    \"swift\",\n    \"markdown\",\n    \"latex\",\n    \"html\",\n    \"sol\"\n];\nclass RecursiveCharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"RecursiveCharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separators\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ]\n        });\n        this.separators = fields?.separators ?? this.separators;\n        this.keepSeparator = fields?.keepSeparator ?? true;\n    }\n    async _splitText(text, separators) {\n        const finalChunks = [];\n        // Get appropriate separator to use\n        let separator = separators[separators.length - 1];\n        let newSeparators;\n        for(let i = 0; i < separators.length; i += 1){\n            const s = separators[i];\n            if (s === \"\") {\n                separator = s;\n                break;\n            }\n            if (text.includes(s)) {\n                separator = s;\n                newSeparators = separators.slice(i + 1);\n                break;\n            }\n        }\n        // Now that we have the separator, split the text\n        const splits = this.splitOnSeparator(text, separator);\n        // Now go merging things, recursively splitting longer texts.\n        let goodSplits = [];\n        const _separator = this.keepSeparator ? \"\" : separator;\n        for (const s of splits){\n            if (await this.lengthFunction(s) < this.chunkSize) {\n                goodSplits.push(s);\n            } else {\n                if (goodSplits.length) {\n                    const mergedText = await this.mergeSplits(goodSplits, _separator);\n                    finalChunks.push(...mergedText);\n                    goodSplits = [];\n                }\n                if (!newSeparators) {\n                    finalChunks.push(s);\n                } else {\n                    const otherInfo = await this._splitText(s, newSeparators);\n                    finalChunks.push(...otherInfo);\n                }\n            }\n        }\n        if (goodSplits.length) {\n            const mergedText = await this.mergeSplits(goodSplits, _separator);\n            finalChunks.push(...mergedText);\n        }\n        return finalChunks;\n    }\n    async splitText(text) {\n        return this._splitText(text, this.separators);\n    }\n    static fromLanguage(language, options) {\n        return new RecursiveCharacterTextSplitter({\n            ...options,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(language)\n        });\n    }\n    static getSeparatorsForLanguage(language) {\n        if (language === \"cpp\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along function definitions\n                \"\\nvoid \",\n                \"\\nint \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"go\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar \",\n                \"\\nconst \",\n                \"\\ntype \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"java\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"js\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n                \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"php\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"proto\") {\n            return [\n                // Split along message definitions\n                \"\\nmessage \",\n                // Split along service definitions\n                \"\\nservice \",\n                // Split along enum definitions\n                \"\\nenum \",\n                // Split along option definitions\n                \"\\noption \",\n                // Split along import statements\n                \"\\nimport \",\n                // Split along syntax declarations\n                \"\\nsyntax \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"python\") {\n            return [\n                // First, try to split along class definitions\n                \"\\nclass \",\n                \"\\ndef \",\n                \"\\n\tdef \",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rst\") {\n            return [\n                // Split along section titles\n                \"\\n===\\n\",\n                \"\\n---\\n\",\n                \"\\n***\\n\",\n                // Split along directive markers\n                \"\\n.. \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"ruby\") {\n            return [\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rust\") {\n            return [\n                // Split along function definitions\n                \"\\nfn \",\n                \"\\nconst \",\n                \"\\nlet \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"scala\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nobject \",\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nval \",\n                \"\\nvar \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"swift\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"sol\") {\n            return [\n                // Split along compiler informations definitions\n                \"\\npragma \",\n                \"\\nusing \",\n                // Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface \",\n                \"\\nlibrary \",\n                // Split along method definitions\n                \"\\nconstructor \",\n                \"\\ntype \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo while \",\n                \"\\nassembly \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else {\n            throw new Error(`Language ${language} is not supported.`);\n        }\n    }\n}\n/**\n * Implementation of splitter which looks at tokens.\n */ class TokenTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"TokenTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"encodingName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"allowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"disallowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tokenizer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.encodingName = fields?.encodingName ?? \"gpt2\";\n        this.allowedSpecial = fields?.allowedSpecial ?? [];\n        this.disallowedSpecial = fields?.disallowedSpecial ?? \"all\";\n    }\n    async splitText(text) {\n        if (!this.tokenizer) {\n            this.tokenizer = await (0,_langchain_core_utils_tiktoken__WEBPACK_IMPORTED_MODULE_1__.getEncoding)(this.encodingName);\n        }\n        const splits = [];\n        const input_ids = this.tokenizer.encode(text, this.allowedSpecial, this.disallowedSpecial);\n        let start_idx = 0;\n        while(start_idx < input_ids.length){\n            if (start_idx > 0) {\n                start_idx -= this.chunkOverlap;\n            }\n            const end_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n            const chunk_ids = input_ids.slice(start_idx, end_idx);\n            splits.push(this.tokenizer.decode(chunk_ids));\n            start_idx = end_idx;\n        }\n        return splits;\n    }\n}\nclass MarkdownTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\")\n        });\n    }\n}\nclass LatexTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"latex\")\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/document.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/document.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDocumentsAsString: () => (/* binding */ formatDocumentsAsString)\n/* harmony export */ });\n/**\n * Given a list of documents, this util formats their contents\n * into a string, separated by newlines.\n *\n * @param documents\n * @returns A string of the documents page content, separated by newlines.\n */ const formatDocumentsAsString = (documents)=>documents.map((doc)=>doc.pageContent).join(\"\\n\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztDQU1DLEdBQ00sTUFBTUEsMEJBQTBCLENBQUNDLFlBQWNBLFVBQVVDLEdBQUcsQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXLEVBQUVDLElBQUksQ0FBQyxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3luY2NoYXQvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcz9hZmMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIGRvY3VtZW50cywgdGhpcyB1dGlsIGZvcm1hdHMgdGhlaXIgY29udGVudHNcbiAqIGludG8gYSBzdHJpbmcsIHNlcGFyYXRlZCBieSBuZXdsaW5lcy5cbiAqXG4gKiBAcGFyYW0gZG9jdW1lbnRzXG4gKiBAcmV0dXJucyBBIHN0cmluZyBvZiB0aGUgZG9jdW1lbnRzIHBhZ2UgY29udGVudCwgc2VwYXJhdGVkIGJ5IG5ld2xpbmVzLlxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0RG9jdW1lbnRzQXNTdHJpbmcgPSAoZG9jdW1lbnRzKSA9PiBkb2N1bWVudHMubWFwKChkb2MpID0+IGRvYy5wYWdlQ29udGVudCkuam9pbihcIlxcblxcblwiKTtcbiJdLCJuYW1lcyI6WyJmb3JtYXREb2N1bWVudHNBc1N0cmluZyIsImRvY3VtZW50cyIsIm1hcCIsImRvYyIsInBhZ2VDb250ZW50Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/pdf.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* reexport safe */ _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__.PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/pdf.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvcGRmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3luY2NoYXQvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvcGRmLmpzP2ExMzIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vLi4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2ZzL3BkZi5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js\n");

/***/ })

};
;